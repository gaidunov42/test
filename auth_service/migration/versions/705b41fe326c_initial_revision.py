"""Initial revision

Revision ID: c0cbaa7eadd5
Revises:
Create Date: 2025-05-01 20:29:33.383660

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision = "c0cbaa7eadd5"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "permissions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("code", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code"),
    )
    op.create_index(op.f("ix_permissions_id"), "permissions", ["id"], unique=False)
    op.create_table(
        "roles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_roles_id"), "roles", ["id"], unique=False)
    op.create_table(
        "roles_permissions",
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("permission_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"], ["permissions.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["role_id"], ["roles.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("role_id", "permission_id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password_hash", sa.Text(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        sa.ForeignKeyConstraint(["role_id"], ["roles.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    # Добавляем роли
    op.execute(
        """
        INSERT INTO roles (name, description) VALUES
        ('user', 'Обычный пользователь'),
        ('manager', 'Менеджер'),
        ('admin', 'Администратор')
    """
    )

    # Добавляем разрешения
    op.execute(
        """
        INSERT INTO permissions (code, description) VALUES
        ('user.user', 'Права потзователя'),
        ('manager.manager', 'Права менеджера'),
        ('admin.admin', 'Права админа')
    """
    )

    # Привязка ролей к разрешениям
    # Нам нужно сначала получить id ролей и разрешений
    role_ids = {
        row.name: row.id
        for row in op.get_bind().execute(text("SELECT id, name FROM roles"))
    }
    perm_ids = {
        row.code: row.id
        for row in op.get_bind().execute(text("SELECT id, code FROM permissions"))
    }

    role_perms = {
        "user": ["user.user"],
        "manager": ["manager.manager", "user.user"],
        "admin": ["user.user", "manager.manager", "admin.admin"],
    }

    for role, perms in role_perms.items():
        for code in perms:
            op.execute(
                f"INSERT INTO roles_permissions (role_id, permission_id) VALUES ({role_ids[role]}, {perm_ids[code]})"
            )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_table("roles_permissions")
    op.drop_index(op.f("ix_roles_id"), table_name="roles")
    op.drop_table("roles")
    op.drop_index(op.f("ix_permissions_id"), table_name="permissions")
    op.drop_table("permissions")
    # ### end Alembic commands ###
